# ╔════════════════════════════════════════════════════════════════════════════════════╗
# ║                                                                                    ║
# ║  Gpg Agent Configuration ($GNUPGHOME/gpg-agent.conf)                               ║
# ║  Author: zx0r                                                                      ║                                                                ║
# ║  Contact: https://github.com/zx0r                                                  ║
# ║                                                                                    ║
# ║  Documentation:                                                                    ║
# ║  https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html  ║
# ║  https://www.gnupg.org/documentation/manuals/gnupg/Agent-OPTION.html               ║
# ║                                                                                    ║
# ║  Reload the agent: 'gpg-connect-agent reloadagent /bye'                            ║
# ║                                                                                    ║
# ╚════════════════════════════════════════════════════════════════════════════════════╝

# Note:
# This script installs and configures GnuPG (GPG) for macOS, sets up Git to use GPG for
# signing commits and ensures security settings are applied. It also auto-detects the 
# user's shell, configures VSCode/VSCodiumto use GPG for commits, and sets up a launch
# agent for gpg-agent.

# ┌───────────────────────────────────────────────────────────────────────────┐
# │ GPG Cache & TTL Settings                                                  │
# └───────────────────────────────────────────────────────────────────────────┘

# # Cache time for normal entries (seconds)
default-cache-ttl 600

# # Cache time for SSH keys (seconds)
default-cache-ttl-ssh 600

# # Max cache time for normal and SSH keys (seconds)
max-cache-ttl 7200
max-cache-ttl-ssh 7200

# # ┌───────────────────────────────────────────────────────────────────────────┐
# # │ GPG Agent Settings                                                        │
# # └───────────────────────────────────────────────────────────────────────────┘

# # Enable SSH support to allow GPG to work as an SSH agent
enable-ssh-support

# # Ensure the correct TTY is used, for passphrase input and other features
ttyname $GPG_TTY

# # ┌───────────────────────────────────────────────────────────────────────────┐
# # │ Key Handling and Security Features                                        │
# # └───────────────────────────────────────────────────────────────────────────┘

# # Keyboard control: disable grabbing for better compatibility with terminal-based apps
# # no-grab

# # Allow preset passphrases (to cache passphrase between uses)
# # allow-preset-passphrase

# # Ignore cached passphrases for signing (useful for secure signing operations)
# ignore-cache-for-signing

# # Write environment variables to a file (important for other tools like VSCode)
# write-env-file ~/.gnupg/gpg-agent.env

# # ┌───────────────────────────────────────────────────────────────────────────┐
# # │ Pinentry Program Configuration                                            │
# # └───────────────────────────────────────────────────────────────────────────┘

# # Select the pinentry program for handling passphrase prompts
allow-loopback-pinentry

# # Update the Pinentry Timeout
# #pinentry-timeout 30

# pinentry-program /usr/bin/pinentry
# pinentry-program /usr/bin/pinentry-tty
# pinentry-program /usr/bin/pinentry-x11
# pinentry-program /usr/bin/pinentry-gnome3
# pinentry-program /usr/local/bin/pinentry-mac
# pinentry-program /opt/homebrew/bin/pinentry-mac
# pinentry-program /usr/local/bin/pinentry-curses

# # This is crucial for GUI integration (macOS graphical pinentry)
# # brew install gpg-suite
pinentry-program /usr/local/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac

# # ┌───────────────────────────────────────────────────────────────────────────┐
# # │ Default key and recipient                                                 │
# # └───────────────────────────────────────────────────────────────────────────┘

# # Refresh gpg-agent's TTY when switching into an X session
# # gpg-connect-agent updatestartuptty /bye > /dev/null

# # Use GnuPG agent for SSH keys (instead of ssh-agent)
# # Note: Make sure that gpg-agent is always started with login.

# # Adding the following to your shell config (.bashrc, .zshrc, config.fish)

# # Check if gpg-agent is running
# # if ! pgrep -x -u "${USER}" gpg-agent &> /dev/null; then
# #     # If not running, make sure gpg-agent is terminated (cleanup)
# #     gpg-connect-agent /bye &> /dev/null
# # fi

# # Set SSH to use gpg-agent (based on 'man gpg-agent', section EXAMPLES)
# unset SSH_AGENT_PID

# # Check if the current SSH_AUTH_SOCK is not pointing to the gpg-agent socket
# if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
#     export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
# fi

# Fix GUI pinentry-mac for macOS
# gpg-agent --gpgconf-test 
# Set GPG_TTY and SSH_AUTH_SOCK in Fish Shell
# Add this to ~/.config/fish/config.fish:

# set -x GPG_TTY (tty)
# set -x SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)

# Add to ~/.gnupg/gpg.conf
# use-agent
# allow-loopback-pinentry
# pinentry-mode default
# #pinentry-mode loopback

# Reload gpg-agent
# gpgconf --kill gpg-agent
# gpgconf --launch gpg-agent

# Check Pinetry-mac
# echo GETPIN | /usr/local/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac
# echo GETPIN | /usr/local/bin/pinentry-mac



